<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Web;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Models\Config;
use App\Models\Contact;
use App\Models\ContactField;
use App\Models\ContactFieldData;
use App\Models\Upload;
use App\Models\DriveFile;
use Auth;

class ContactController extends Controller
{

    public function __construct()
    {
        $this->middleware(function ($request, $next) {
            if (Config::config()->website_disabled ?? null) {
                if (!Auth::user()) return redirect(route('login'));

                $role = Auth::user()->role ?? null;
                if ($role == 'admin') return redirect(route('admin.dashboard'));
                elseif ($role == 'internal') return redirect(route('internal.dashboard'));
                elseif ($role == 'user') return redirect(route('user'));
            }

            if ((Config::config()->website_maintenance_enabled ?? null)) {
                if (!(Auth::user()->role ?? null) == 'admin') return redirect(route('maintenance'));
            }

            if (((Config::config()->contact_page_disabled ?? null))) return redirect(route('home'));

            return $next($request);
        });
    }


    public function index(Request $request)
    {
        // get form fields
        $fields = ContactField::where('active', 1)->orderBy('position')->get();

        $custom_fields = array();

        foreach ($fields as $field) {

            $field_lang = ContactFieldLang::where('field_id', $field->id)->where('lang_id', SysLang::getActiveLang()->id)->first();

            $custom_fields[] = array('id' => $field->id, 'type' => $field->type, 'required' => $field->required, 'col_md' => $field->col_md, 'label' => $field_lang->label ?? null, 'info' => $field_lang->info ?? null, 'dropdowns' => $field_lang->dropdowns ?? null);
        }

        return view('web.contact', [
            'custom_fields' => (object)$custom_fields ?? null
        ]);
    }


    /**
     * Process form
     */
    public function store(Request $request)
    {
        $inputs = $request->except(['_token', '_method']);
        //dd(SysConfig::config()->contact_form_recaptcha);

        if (!(($request->submit_frm ?? null) == 1)) return redirect(route('contact'));

        $referer = request()->headers->get('referer');

        $source_lang = $request->lang ?? SysLang::getDefaultLang()->code;

        $source_lang_id = SysLang::getLangFromCode($source_lang)->id;

        if (SysConfig::config()->contact_form_recaptcha ?? null) {
            // Build POST request:
            $recaptcha_url = 'https://www.google.com/recaptcha/api/siteverify';
            $recaptcha_secret = SysConfig::config()->google_recaptcha_secret_key ?? null;

            $g_key = 'g-recaptcha-response';
            $recaptcha_response = $request->$g_key;

            // Make and decode POST request:
            $recaptcha = file_get_contents($recaptcha_url . '?secret=' . $recaptcha_secret . '&response=' . $recaptcha_response . '&remoteip=' . $request->ip());
            $recaptcha = json_decode($recaptcha);

            // Take action based on the score returned:
            if ($recaptcha->success) {
                if ($recaptcha->score < 0.5) return redirect($request->Url())->with('error', 'recaptcha_error');
            } else return redirect($request->Url())->with('error', 'recaptcha_error');
        }

        $validator = Validator::make($request->all(), [
            'subject' => 'required',
            'name' => 'required',
            'email' => 'email',
        ]);

        if ($validator->fails()) {
            return redirect($request->Url())
                ->withErrors($validator)
                ->withInput();
        }

        $message = Contact::create([
            'name' => $request->name ?? null,
            'email' => $request->email ?? null,
            'subject' => $request->subject ?? null,
            'message' => $request->message ?? null,
            'referer' => $referer ?? null,
            'ip' => $request->ip(),
            'geo_country' => ip_info($request->ip(), "Country") ?? null,
            'geo_country_code' => ip_info($request->ip(), "Country Code") ?? null,
            'geo_city' => ip_info($request->ip(), "City") ?? null,
            'source_lang_id' => $source_lang_id ?? null,
        ]);

        $fields = ContactField::where('active', 1)->orderBy('position', 'asc')->get();

        foreach ($fields as $field) {
            if ($field->type == 'checkbox') {
                $value_key = $field->id ?? null;
                if (isset($inputs[$value_key])) $value = json_encode($inputs[$value_key]);
                else $value = null;
            } elseif ($field->type == 'file') {
                if ($request->hasFile($field->id)) {
                    $file = Upload::storeFile($request->file($field->id));
                    $value = $file->code;
                }
            } else {
                $value_key = $field->id;
                $value = $inputs[$value_key] ?? null;
            }

            $field = ContactFieldData::create([
                'contact_id' => $message->id,
                'field_id' => $field->id,
                'value' => $value ?? null,
            ]);

            if ($field->type == 'file') DriveFile::where('id', $file->id)->update(['module' => 'forms', 'item_id' => $field->id]);
        }

        return redirect(route('contact'))->with('success', 'sent');
    }
}
